---
# test cases from https://github.com/nst/JSONTestSuite
  type: "SERIALIZE"
  tests:
      test_array_no_comma:
          info: "Should not parse an array with multiple entries with no comma separation"
          input:
            type: "str"
            arg: '[1 true]'
          assert:
            func: "fail"
      test_array_invalid_utf8:
          info: "Should not parse illegal unicode in an array"
          input:
            type: "str"
            arg: '[aï¿½]'
          assert:
            func: "fail"
      test_array_just_minus:
          info: ""
          input:
              type: "str"
              arg: "[-]"
          assert:
              func: "fail"
      test_object_bracket_key:
          info: "Should not parse a bracket used as object key"
          input:
              type: "str"
              arg: '{[: \"x\"}'
          assert:
              func: "fail"
      test_object_two_commas_in_a_row:
          info: "Should not parse two commas in a row in an object"
          input:
              type: "str"
              arg: '{\"a\":\"\",,\"c\":\"d\"}'
          assert:
              func: "fail"
      test_number_2_e_three:
          info: ""
          input:
              type: "str"
              arg: "[2.e-3]"
          assert:
              func: "fail"
      test_number_1_0_e:
          info: ""
          input:
              type: "str"
              arg: "[1.0e-]"
          assert:
              func: "fail"
      test_structure_ascii_unicode_identifier:
          info: ""
          input:
              type: "str"
              arg: "a\xc3\xa5"
          assert:
              func: "fail"
      test_structure_whitespace_formfeed:
        info: "" 
        input:
              type: "str"
              arg: "[\x0c]"
        assert:
              func: "fail"
      test_object_lone_continuation_byte_in_key_and_trailing_comma:
          info: ""
          input:
              type: "file"
              arg: "n_object_lone_continuation_byte_in_key_and_trailing_comma.json"
          assert:
              func: "fail"
      test_structure_no_data:
          info: ""
          input:
              type: "str"
              arg: ""
          assert:
              func: "fail"
      test_number_1eE2:
          info: ""
          input:
              type: "str"
              arg: "[1eE2]"
          assert:
              func: "fail"
      test_number_0_capital_E_plus:
          info: ""
          input:
              type: "str"
              arg: "[0E+]"
          assert:
              func: "fail"
      test_number_minus_space_1:
          info: ""
          input:
              type: "str"
              arg: "[- 1]"
          assert:
              func: "fail"
      test_structure_angle_bracket_dot:
          info: ""
          input:
              type: "str"
              arg: "<.>"
          assert:
              func: "fail"
      test_structure_unclosed_object:
          info: ""
          input:
              type: "raw"
              arg: "'{\"asd\":\"asd\"'"
          assert:
              func: "fail"
      test_object_single_quote:
          info: ""
          input:
              type: "raw"
              arg: "'\"{a:0}\"'"
          assert:
              func: "fail"
      test_incomplete_false:
          info: ""
          input:
              type: "str"
              arg: "[fals]"
          assert:
              func: "fail"
      test_number_with_alpha_char:
          info: ""
          input:
              type: "str"
              arg: "[1.8011670033376514H-308]"
          assert:
              func: "fail"
      test_number_with_alpha:
          info: ""
          input:
              type: "str"
              arg: "[1.2a-3]"
          assert:
              func: "fail"
      test_number_minus_infinity:
          info: ""
          input:
              type: "str"
              arg: "[-Infinity]"
          assert:
              func: "fail"
      test_string_escaped_emoji:
          info: ""
          input:
              type: "file"
              arg:  "n_string_escaped_emoji.json"
          assert:
              func: "fail"
      test_structure_open_object_open_string:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a'"
          assert:
              func: "fail"
      test_single_space:
          info: ""
          input:
              type: "str"
              arg: " "
          assert:
              func: "fail"
      test_structure_open_array_object:
          info: ""
          input:
              type: "str"
              arg: ""
          assert:
              func: "fail"
      test_structure_array_trailing_garbage:
          info: ""
          input:
              type: "str"
              arg: "[1]x"
          assert:
              func: "fail"
      test_number_hex_1_digit:
          info: ""
          input:
              type: "str"
              arg: "[0x1]"
          assert:
              func: "fail"
      test_incomplete_true:
          info: ""
          input:
              type: "str"
              arg: "[tru]"
          assert:
              func: "fail"
      test_number_real_without_fractional_part:
          info: ""
          input:
              type: "str"
              arg: "[1.]"
          assert:
              func: "fail"
      test_number_1_dot_0e:
          info: ""
          input:
              type: "str"
              arg: "[1.0e]"
          assert:
              func: "fail"
      test_number_0_1_2:
          info: ""
          input:
              type: "str"
              arg: "[0.1.2]"
          assert:
              func: "fail"
      test_string_unescaped_newline:
          info: ""
          input:
              type: "file"
              arg: "n_string_unescaped_newline.json"
          assert:
              func: "fail"
      test_structure_nullbyte_outside_string:
          info: ""
          input:
              type: "file"
              arg: "n_structure_nullbyte_outside_string"
          assert:
              func: "fail"
      test_structure_open_object_open_array:
          info: ""
          input:
              type: "str"
              arg: "{["
          assert:
              func: "fail"
      test_object_trailing_comment_slash_open_incomplete:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}/'"
          assert:
              func: "fail"
      test_structure_comma_instead_of_closing_brace:
          info: ""
          input:
              type: "raw"
              arg: "'{\"x\": true,\"'"
          assert:
              func: "fail"
      test_structure_unclosed_array_unfinished_true:
          info: ""
          input:
              type: "str"
              arg: "[ false, tru"
          assert:
              func: "fail"
      test_structure_angle_bracket_null:
          info: ""
          input:
              type: "str"
              arg: "[<null>]"
          assert:
              func: "fail"
      test_number_2_dot_e3:
          info: ""
          input:
              type: "str"
              arg: "[2.e3]"
          assert:
              func: "fail"
      test_string_escaped_ctrl_char_tab:
          info: ""
          input:
              type: "file"
              arg: "n_string_escaped_ctrl_char_tab.json"
          assert:
              func: "fail"
      test_structure_open_object:
          info: ""
          input:
              type: "str"
              arg: "{"
          assert:
              func: "fail"
      test_object_repeated_null_null:
          info: ""
          input:
              type: "str"
              arg: "{null:null,null:null}"
          assert:
              func: "fail"
      test_string_single_quote:
          info: ""
          input:
              type: "raw"
              arg: "\"['single quote']\""
          assert:
              func: "fail"
      test_object_no_colon:
          info: ""
          input:
              type: "raw"
              arg: "'\"{\"a\"\"'"
          assert:
              func: "fail"
      test_string_incomplete_escaped_character:
          info: ""
          input:
              type: "file"
              arg: "n_string_incomplete_escaped_character.json"
          assert:
              func: "fail"
      test_string_unescaped_tab:
          info: ""
          input:
              type: "raw"
              arg: "'[\"  \"]'"
          assert:
              func: "fail"
      test_object_trailing_comment_open:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}/**//'"
          assert:
              func: "fail"
      test_array_unclosed:
          info: ""
          input:
              type: "str"
              arg: "["
          assert:
              func: "fail"
      test_structure_end_array:
          info: ""
          input:
              type: "str"
              arg: "]"
          assert:
              func: "fail"
      test_structure_open_array_open_object:
          info: ""
          input:
              type: "str"
              arg: "[{"
          assert:
              func: "fail"
      test_string_invalid_unicode_escape:
          info: ""
          input:
              type: "file"
              arg:  "n_string_invalid_unicode_escape.json"
          assert:
              func: "fail"
      test_number_infinity:
          info: ""
          input:
              type: "str"
              arg: "[Infinity]"
          assert:
              func: "fail"
      test_structure_lone_open_bracket:
          info: ""
          input:
              type: "str"
              arg: "["
          assert:
              func: "fail"
      test_object_unterminated_value:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"a\"'"
          assert:
              func: "fail"
      test_object_trailing_comment_slash_open:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}//'"
          assert:
              func: "fail"
      test_number_neg_int_starting_with_zero:
          info: ""
          input:
              type: "str"
              arg: "[-012]"
          assert:
              func: "fail"
      test_number__dash_1_0_dot:
          info: ""
          input:
              type: "str"
              arg: "[-1.0.]"
          assert:
              func: "fail"
      test_object_missing_semicolon:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\" \"\"}'"
          assert:
              func: "fail"
      test_object_comma_instead_of_colon:
          info: ""
          input:
              type: "raw"
              arg: "'{\"x\", null}'"
          assert:
              func: "fail"
      test_structure_capitalized_True:
          info: ""
          input:
              type: "str"
              arg: "[True]"
          assert:
              func: "fail"
      test_structure_whitespace_U_plus_2060_word_joiner:
          info: ""
          input:
              type: "file"
              arg: "n_structure_whitespace_U_plus_2060_word_joiner.json"
          assert:
              func: "fail"
      test_array_number_and_several_commas:
          info: ""
          input:
              type: "str"
              arg: "[1,,]"
          assert:
              func: "fail"
      test_object_several_trailing_commas:
          info: ""
          input:
              type: "raw"
              arg: "'{\"id\":0,,,,,}'"
          assert:
              func: "fail"
      test_structure_double_array:
          info: ""
          input:
              type: "str"
              arg: "[][]"
          assert:
              func: "fail"
      test_number_with_leading_zero:
          info: ""
          input:
              type: "str"
              arg: "[012]"
          assert:
              func: "fail"
      test_number_NaN:
          info: ""
          input:
              type: "str"
              arg: "[NaN]"
          assert:
              func: "fail"
      test_array_unclosed_with_object_inside:
          info: ""
          input:
              type: "str"
              arg: "[{}"
          assert:
              func: "fail"
      test_number_0_dot_3e_plus:
          info: ""
          input:
              type: "str"
              arg: "[0.3e+]"
          assert:
              func: "fail"
      test_string_unescaped_ctrl_char:
          info: ""
          input:
              type: "file"
              arg: "n_string_unescaped_ctrl_char.json" 
          assert:
              func: "fail"
      test_structure_single_star:
          info: ""
          input:
              type: "str"
              arg: "*"
          assert:
              func: "fail"
      test_number_minus_01:
          info: ""
          input:
              type: "str"
              arg: "[-01]"
          assert:
              func: "fail"
      test_structure_object_with_trailing_garbage:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\": true} \"x\"'"
          assert:
              func: "fail"
      test_number_0e_plpus:
          info: ""
          input:
              type: "str"
              arg: "[0e+]"
          assert:
              func: "fail"
      test_structure_unescaped_LF_before_string:
          info: ""
          input:
              type: "file"
              arg: "n_structure_unescaped_LF_before_string.json" 
          assert:
              func: "fail"
      test_object_trailing_comma:
          info: ""
          input:
              type: "raw"
              arg: "'{\"id\":0,}'"
          assert:
              func: "fail"
      test_structure_open_array_apostrophe:
          info: ""
          input:
              type: "raw"
              arg: "\"[']\""
          assert:
              func: "fail"
      test_array_double_comma:
          info: ""
          input:
              type: "str"
              arg: "[1,,2]"
          assert:
              func: "fail"
      test_structure_open_array_string:
          info: ""
          input:
              type: "raw"
              arg: "'[\"a\"'"
          assert:
              func: "fail"
      test_object_with_trailing_garbage:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}#'"
          assert:
              func: "fail"
      test_object_bad_value:
          info: ""
          input:
              type: "raw"
              arg: "'[\"x\", truth]'"
          assert:
              func: "fail"
      test_number_minus_sign_with_trailing_garbage:
          info: ""
          input:
              type: "str"
              arg: "[-foo]"
          assert:
              func: "fail"
      test_object_missing_value:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"'"
          assert:
              func: "fail"
      test_structure_array_with_extra_array_close:
          info: ""
          input:
              type: "str"
              arg: "[1]]"
          assert:
              func: "fail"
      test_structure_100000_opening_arrays:
          info: ""
          input:
              type: "str"
              arg: ""
          assert:
              func: "fail"
      test_number_plus_1:
          info: ""
          input:
              type: "str"
              arg: "[+1]"
          assert:
              func: "fail"
      test_string_backslash_00:
          info: ""
          input:
              type: "file"
              arg: "n_string_backslash_00.json"
          assert:
              func: "fail"
      test_structure_close_unopened_array:
          info: ""
          input:
              type: "str"
              arg: "1]"
          assert:
              func: "fail"
      test_array_1_true_without_comma:
          info: ""
          input:
              type: "str"
              arg: "[1 true]"
          assert:
              func: "fail"
      test_object_emoji:
          info: ""
          input:
              type: "str"
              arg: "n_object_emoji.json"
          assert:
              func: "fail"
      test_structure_UTF8_BOM_no_data:
          info: ""
          input:
              type: "file"
              arg: "n_structure_UTF8_BOM_no_data.json"
          assert:
              func: "fail"
      test_array_comma_and_number:
          info: ""
          input:
              type: "str"
              arg: "[,1]"
          assert:
              func: "fail"
      test_number_invalid_negative_real:
          info: ""
          input:
              type: "str"
              arg: "[-123.123foo]"
          assert:
              func: "fail"
      test_string_with_trailing_garbage:
          info: ""
          input:
              type: "raw"
              arg: "'\"\"x'"
          assert:
              func: "fail"
      test_string_incomplete_surrogate:
          info: ""
          input:
              type: "file"
              arg: "n_string_incomplete_surrogate.json"
          assert:
              func: "fail"
      test_array_newlines_unclosed:
          info: ""
          input:
              type: "file"
              arg: "n_array_newlines_unclosed.json"
          assert:
              func: "fail"
      test_array_incomplete_invalid_value:
          info: ""
          input:
              type: "str"
              arg: "[x"
          assert:
              func: "fail"
      test_structure_unclosed_array:
          info: ""
          input:
              type: "str"
              arg: "[1"
          assert:
              func: "fail"
      test_object_trailing_comment:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}/**/'"
          assert:
              func: "fail"
      test_array_spaces_vertical_tab_formfeed:
          info: ""
          input:
              type: "file"
              arg: "n_array_spaces_vertical_tab_formfeed.json"
          assert:
              func: "fail"
      test_number_plus_plus:
          info: ""
          input:
              type: "str"
              arg: "[++1234]"
          assert:
              func: "fail"
      test_structure_unicode_identifier:
          info: ""
          input:
              type: "str"
              arg: "\xc3\xa5"
          assert:
              func: "fail"
      test_array_a_invalid_utf8:
          info: ""
          input:
              type: "str"
              arg: "[a\xe5]"
          assert:
              func: "fail"
      test_array_double_extra_comma:
          info: ""
          input:
              type: "raw"
              arg: "'[\"x\",,]'"
          assert:
              func: "fail"
      test_structure_open_object_close_array:
          info: ""
          input:
              type: "str"
              arg: "{]"
          assert:
              func: "fail"
      test_string_1_surrogate_then_escape_u1x:
          info: ""
          input:
              type: "file"
              arg:  "n_string_1_surrogate_then_escape_u1x.json"
          assert:
              func: "fail"
      test_array_extra_close:
          info: ""
          input:
              type: "file"
              arg: "n_array_extra_close.json"
          assert:
              func: "fail"
      test_string_accentuated_char_no_quotes:
          info: ""
          input:
              type: "str"
              arg: "[\xc3\xa9]"
          assert:
              func: "fail"
      test_object_missing_key:
          info: ""
          input:
              type: "str"
              arg: '{:\"\"}'
          assert:
              func: "fail"
      test_string_incomplete_surrogate_escape_invalid:
          info: ""
          input:
              type: "file"
              arg: "n_string_incomplete_surrogate_escape_invalid.json" 
          assert:
              func: "fail"
      test_number_9_e_plus:
          info: ""
          input:
              type: "str"
              arg: "[9.e+]"
          assert:
              func: "fail"
      test_string_unicode_CapitalU:
          info: ""
          input:
              type: "file"
              arg: "n_string_unicode_CapitalU.json"
          assert:
              func: "fail"
      test_string_single_string_no_double_quotes:
          info: ""
          input:
              type: "str"
              arg: "ac"
          assert:
              func: "fail"
      test_string_invalid_utf8_after_escape:
          info: ""
          input:
              type: "file"
              arg: "n_string_invalid_utf8_after_escape.json"
          assert:
              func: "fail"
      test_array_number_and_comma:
          info: ""
          input:
              type: "str"
              arg: '[1,]'
          assert:
              func: "fail"
      test_number_Inf:
          info: ""
          input:
              type: "str"
              arg: "[Inf]"
          assert:
              func: "fail"
      test_number_2_e_plus_3:
          info: ""
          input:
              type: "str"
              arg: "[2.e+3]"
          assert:
              func: "fail"
      test_number_neg_real_without_int_part:
          info: ""
          input:
              type: "str"
              arg: "[-.123]"
          assert:
              func: "fail"
      test_array_colon_instead_of_comma:
          info: ""
          input:
              type: "str"
              arg: '[\"\": 1]'
          assert:
              func: "fail"
      test_array_invalid_utf8:
          info: ""
          input:
              type: "str"
              arg: "[\xff]"
          assert:
              func: "fail"
      test_number__plus_Inf:
          info: ""
          input:
              type: "str"
              arg: "[+Inf]"
          assert:
              func: "fail"
      test_structure_incomplete_UTF8_BOM:
          info: ""
          input:
              type: "file"
              arg: "n_structure_incomplete_UTF8_BOM.json"
          assert:
              func: "fail"
      test_string_1_surrogate_then_escape_u1:
          info: ""
          input:
              type: "file"
              arg: "n_string_1_surrogate_then_escape.json"
          assert:
              func: "fail"
      test_array_unclosed_trailing_comma:
          info: ""
          input:
              type: "str"
              arg: "[1,"
          assert:
              func: "fail"
      test_structure_lone_invalid_utf_8:
          info: ""
          input:
              type: "str"
              arg: "\xe5"
          assert:
              func: "fail"
      test_string_invalid_backslash_esc:
          info: ""
          input:
              type: "file"
              arg: "n_string_invalid_backslash_esc.json"
          assert:
              func: "fail"
      test_structure_unclosed_array_unfinished_false:
          info: ""
          input:
              type: "str"
              arg: "[ true, fals"
          assert:
              func: "fail"
      test_object_with_single_string:
          info: ""
          input:
              type: "raw"
              arg: "'{ \"foo\" : \"ar\", \"a\" }'"
          assert:
              func: "fail"
      test_array_star_inside:
          info: ""
          input:
              type: "str"
              arg: "[*]"
          assert:
              func: "fail"
      test_multidigit_number_then_00:
          info: ""
          input:
              type: "file"
              arg: "n_multidigit_number_then_00.json"
          assert:
              func: "fail"
      test_structure_object_with_comment:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":/*comment*/\"\"}'"
          assert:
              func: "fail"
      test_array_extra_comma:
          info: ""
          input:
              type: "str"
              arg: '[\"\",]'
          assert:
              func: "fail"
      test_string_leading_uescaped_thinspace:
          info: ""
          input:
              type: "file"
              arg: "n_string_leading_uescaped_thinspace.json"
          assert:
              func: "fail"
      test_array_items_separated_by_semicolon:
          info: ""
          input:
              type: "str"
              arg: "[1:2]"
          assert:
              func: "fail"
      test_object_unquoted_key:
          info: ""
          input:
              type: "str"
              arg: '{a: \"\"}'
          assert:
              func: "fail"
      test_array_missing_value:
          info: ""
          input:
              type: "str"
              arg: '[   , \"\"]'
          assert:
              func: "fail"
      test_array_incomplete:
          info: ""
          input:
              type: "file"
              arg: "n_array_incomplete.json" 
          assert:
              func: "fail"
      test_number_hex_2_digits:
          info: ""
          input:
              type: "str"
              arg: "[0x42]"
          assert:
              func: "fail"
      test_object_non_string_key_but_huge_number_instead:
          info: ""
          input:
              type: "str"
              arg: "{9999E9999:1}"
          assert:
              func: "fail"
      test_structure_object_followed_by_closing_object:
          info: ""
          input:
              type: "str"
              arg: "{}}"
          assert:
              func: "fail"
      test_number_real_garbage_after_e:
          info: ""
          input:
              type: "str"
              arg: "[1ea]"
          assert:
              func: "fail"
      test_number_0_3e:
          info: ""
          input:
              type: "str"
              arg: "[0.3e]"
          assert:
              func: "fail"
      test_number_invalid_utf_8_in_bigger_int:
          info: ""
          input:
              type: "str"
              arg: "[123\xe5]"
          assert:
              func: "fail"
      test_object_key_with_single_quotes:
          info: ""
          input:
              type: "raw"
              arg: "\"{key: 'value'}\""
          assert:
              func: "fail"
      test_array_unclosed_with_new_lines:
          info: ""
          input:
              type: "file"
              arg: "n_array_unclosed_with_new_lines.json"
          assert:
              func: "fail"
      test_number_neg_with_garbage_at_end:
          info: ""
          input:
              type: "str"
              arg: "[-1x]"
          assert:
              func: "fail"
      test_object_garbage_at_end:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"a\" 123}'"
          assert:
              func: "fail"
      test_number_U_plus_FF11_fullwidth_digit_one:
          info: ""
          input:
              type: "file"
              arg: "n_number_U+FF11_fullwidth_digit_one.json"
          assert:
              func: "fail"
      test_string_single_doublequote:
          info: ""
          input:
              type: "raw"
              arg: "'\"'"
          assert:
              func: "fail"
      test_string_escape_x:
          info: ""
          input:
              type: "file"
              arg: "n_string_escape_x.json"
          assert:
              func: "fail"
      test_number_1_0e_plus:
          info: ""
          input:
              type: "str"
              arg: "[1.0e+]"
          assert:
              func: "fail"
      test_structure_open_array_comma:
          info: ""
          input:
              type: "str"
              arg: "[,"
          assert:
              func: "fail"
      test_structure_open_object_comma:
          info: ""
          input:
              type: "str"
              arg: "{,"
          assert:
              func: "fail"
      test_number_0_capital_E:
          info: ""
          input:
              type: "str"
              arg: "[0E]"
          assert:
              func: "fail"
      test_string_no_quotes_with_bad_escape:
          info: ""
          input:
              type: "str"
              arg: "[\\n]"
          assert:
              func: "fail"
      test_number_minus_NaN:
          info: ""
          input:
              type: "str"
              arg: "[-NaN]"
          assert:
              func: "fail"
      test_number_minus_2_dot:
          info: ""
          input:
              type: "str"
              arg: "[-2.]"
          assert:
              func: "fail"
      test_number_invalid_utf_8_in_int:
          info: ""
          input:
              type: "file"
              arg: "n_number_invalid_utf_8_in_int.json"
          assert:
              func: "fail"
      test_number_0_e1:
          info: ""
          input:
              type: "str"
              arg: "[0.e1]"
          assert:
              func: "fail"
      test_array_just_comma:
          info: ""
          input:
              type: "str"
              arg: "[,]"
          assert:
              func: "fail"
      test_object_missing_colon:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\" }'"
          assert:
              func: "fail"
      test_number_starting_with_dot:
          info: ""
          input:
              type: "str"
              arg: "[.123]"
          assert:
              func: "fail"
      test_structure_single_eacute:
          info: ""
          input:
              type: "str"
              arg: "\xe9"
          assert:
              func: "fail"
      test_structure_unclosed_array_partial_null:
          info: ""
          input:
              type: "str"
              arg: "[ false, nul"
          assert:
              func: "fail"
      test_number_expression:
          info: ""
          input:
              type: "str"
              arg: "[1+2]"
          assert:
              func: "fail"
      test_number_real_with_invalid_utf8_after_e:
          info: ""
          input:
              type: "str"
              arg: "[1e\xe5]"
          assert:
              func: "fail"
      test_array_inner_array_no_comma:
          info: ""
          input:
              type: "str"
              arg: "[3[4]]"
          assert:
              func: "fail"
      test_structure_array_with_unclosed_string:
          info: ""
          input:
              type: "raw"
              arg: "'[\"asd]'"
          assert:
              func: "fail"
      test_structure_number_with_trailing_garbage:
          info: ""
          input:
              type: "str"
              arg: "2@"
          assert:
              func: "fail"
      test_string_invalid_utf8_in_escape:
          info: ""
          input:
              type: "file"
              arg: "n_string_invalid-utf-8-in-escape.json"
          assert:
              func: "fail"
      test_number_1_000:
          info: ""
          input:
              type: "str"
              arg: "[1 000.0]"
          assert:
              func: "fail"
      test_string_escaped_backslash_bad:
          info: ""
          input:
              type: "file"
              arg: "n_string_escaped_backslash_bad.json"
          assert:
              func: "fail"
      test_object_double_colon:
          info: ""
          input:
              type: "raw"
              arg: "'{\"x\"::\"\"}'"
          assert:
              func: "fail"
      test_structure_object_unclosed_no_value:
          info: ""
          input:
              type: "str"
              arg: '{\"\":'
          assert:
              func: "fail"
      test_string_incomplete_escape:
          info: ""
          input:
              type: "file"
              arg: "n_string_incomplete_escape.json"
          assert:
              func: "fail"
      test_number_invalid_plus_minus:
          info: ""
          input:
              type: "str"
              arg: "[0e+-1]"
          assert:
              func: "fail"
      test_array_comma_after_close:
          info: ""
          input:
              type: "str"
              arg: '[\"\"],'
          assert:
              func: "fail"
      test_string_start_escape_unclosed:
          info: ""
          input:
              type: "file"
              arg: "n_string_start_escape_unclosed.json"
          assert:
              func: "fail"
      test_structure_U_plus_2060_word_joined:
          info: ""
          input:
              type: "str"
              arg: "[\xe2\x81\xa0]"
          assert:
              func: "fail"
      test_number_0e:
          info: ""
          input:
              type: "str"
              arg: "[0e]"
          assert:
              func: "fail"
      test_structure_open_array_open_string:
          info: ""
          input:
              type: "raw"
              arg: "'[\"a\"'"
          assert:
              func: "fail"
      test_string_1_surrogate_then_escape:
          info: ""
          input:
              type: "raw"
              arg: "''"  # TO FIX
          assert:
              func: "fail"
      test_number__dot_2e_3:
          info: ""
          input:
              type: "str"
              arg: "[.2e-3]"
          assert:
              func: "fail"
      test_number_invalid_utf_8_in_exponent:
          info: ""
          input:
              type: "str"
              arg: "[1e1\xe5]"
          assert:
              func: "fail"
      test_number__dot_minus_1:
          info: ""
          input:
              type: "str"
              arg: "[.-1]"
          assert:
              func: "fail"
      test_structure_open_open:
          info: ""
          input:
              type: "file"
              arg: "n_structure_open_open.json"
          assert:
              func: "fail"
      test_string_1_surrogate_then_escape_u:
          info: ""
          input:
              type: "file"
              arg: "n_string_1_surrogate_then_escape_u.json"
          assert:
              func: "fail"
      test_structure_open_object_string_with_apostrophes:
          info: ""
          input:
              type: "raw"
              arg: "'\"\"{a\"\"'"
          assert:
              func: "fail"
      test_incomplete_null:
          info: ""
          input:
              type: "str"
              arg: "[nul]"
          assert:
              func: "fail"
      test_structure_trailing_hash:
          info: ""
          input:
              type: "raw"
              arg: "'{\"a\":\"\"}#{}'"
          assert:
              func: "fail"
      test_object_non_string_key:
          info: ""
          input:
              type: "str"
              arg: "{1:1}"
          assert:
              func: "fail"
