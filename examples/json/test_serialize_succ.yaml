---
# test cases from https://github.com/nst/JSONTestSuite
type: "SERIALIZE"
tests:
    test_object_long_strings:
        input:
            type: "str"
            arg: ""
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicodeEscapedBackslash:
        input:
            "type": "file"
            arg: "y_string_unicodeEscapedBackslash.json"
        assert:
            func: "compare_list"
            arg: ""
    test_number_int_with_exp:
        input:
            type: "str"
            arg: "[20e1]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_with_trailing_space:
        input:
            type: "str"
            arg: "[2] "
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_double_escape_a:
        input:
            "type": "file"
            arg: "y_string_double_escape_a.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_negative_one:
        input:
            type: "str"
            arg: "[-1]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_capital_e:
        input:
            type: "str"
            arg: "[1E22]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_allowed_escapes:
        input:
            "type": "file"
            arg:  "y_string_allowed_escapes.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_true_in_array:
        input:
            type: "str"
            arg: "[true]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_negative_real:
        input:
            type: "str"
            arg: "-0.1"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_with_newlines:
        input:
            "type": "file"
            arg: "y_object_with_newlines.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_1FFFE_nonchar:
        input:
            "type": "file"
            arg: "y_string_unicode_U_plus_1FFFE_nonchar.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_nonCharacterInUTF_minus_8_U_plus10FFFF:
        input:
            "type": "file"
            arg: "y_string_nonCharacterInUTF_minus_8_U_plus10FFFF.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_exponent:
        input:
            type: "str"
            arg: "[123e45]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_duplicated_key:
        input:
            type: "file"
            arg: "y_object_duplicated_key.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_basic:
        input:
            type: "file"
            arg: "y_object_basic.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_last_surrogates_1_and_2:
        input:
            "type": "file"
            arg: "y_string_last_surrogates_1_and_2.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_pos_exponent:
        input:
            type: "str"
            arg: "[1e+2]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_FFFE_nonchar:
        input:
            "type": "file"
            arg: "y_string_unicode_U_plus_FFFE_nonchar.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_uEscape:
        input:
            "type": "file"
            arg: "y_string_uEscape.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_two_byte_utf_8:
        input:
            "type": "file"
            arg: "y_string_two_byte_utf_8.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_in_array_with_leading_space:
        input:
            type: "file"
            arg: "y_string_in_array_with_leading_space.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_with_1_and_newline:
        input:
            type: "file"
            arg: "y_array_with_1_and_newline.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_capital_e_neg_exp:
        input:
            type: "str"
            arg: "[1E-2]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_escaped_control_character:
        input:
            "type": "file"
            arg: "y_string_escaped_control_character.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_with_leading_space:
        input:
            type: "str"
            arg: " [1]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_one_byte_utf_8:
        input:
            "type": "file"
            arg: "y_string_one_byte_utf_8.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_fraction_exponent:
        input:
            type: "str"
            arg: "[123.456e78]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_extreme_numbers:
        input:
            type: "file"
            arg: "y_object_extreme_numbers.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_duplicated_key_and_value:
        input:
            type: "file"
            arg: "y_object_duplicated_key_and_value.json" 
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_empty:
        input:
            type: "str"
            arg: "[]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_heterogeneous:
        input:
            type: "file"
            arg: "y_array_heterogeneous.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_double_close_to_zero:
        input:
            type: "str"
            arg: ""
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_pi:
        input:
            "type": "file"
            arg: "y_string_pi.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_escaped_double_quote:
        input:
            "type": "file"
            arg: "y_string_unicode_escaped_double_quote.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_empty_string:
        input:
            type: "file"
            arg: "y_array_empty_string.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_false:
        input:
            type: "str"
            arg: "[false]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_2064_invisible_plus:
        input:
            type: "file"
            arg: "y_string_unicode_U_plus_2064_invisible_plus.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_string_unicode:
        input:
            type: "str"
            arg: ""
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_escaped_null_in_key:
        input:
            type: "file"
            arg: "y_object_escaped_null_in_key.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_simple_ascii:
        input:
            type: "file"
            arg: "y_string_simple_ascii.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_FDD0_nonchar:
        input:
            type: "file"
            arg: "y_string_unicode_U_plus_FDD0_nonchar.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_nonCharacterInUTF_8_U_plus_FFFF:
        input:
            type: "file"
            arg: "y_string_nonCharacterInUTF_8_U_plus_FFFF.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_0e_plus_1:
        input:
            type: "str"
            arg: "[0e+1]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unescaped_char_delete:
        input:
            type: "file"
            arg: "y_string_unescaped_char_delete.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_capital_e_pos_exp:
        input:
            type: "str"
            arg: "[1E+2]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_200B_ZERO_WIDTH_SPACE:
        input:
            type: "file"
            arg: "y_string_unicode_U_plus_200B_ZERO_WIDTH_SPACE.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_u_plus_2028_line_sep:
        input:
            type: "file"
            arg: "y_string_u_plus_2028_line_sep.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_accepted_surrogate_pair:
        input:
            type: "file"
            arg: "y_string_accepted_surrogate_pair.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_empty_key:
        input:
            type: "file"
            arg: "y_object_empty_key.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_simple_real:
        input:
            type: "str"
            arg: "[123.456789]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_uescaped_newline:
        input:
            type: "file"
            arg: "y_string_uescaped_newline.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_backslash_doublequotes:
        input:
            type: "file"
            arg: "y_string_backslash_doublequotes.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object:
        input:
            type: "file"
            arg: "y_object.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_utf8:
        input:
            type: "file"
            arg: "y_string_utf8.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_string_empty:
        input:
            type: "str"
            arg: ""
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_null_escape:
        input:
            type: "file"
            arg: "y_string_null_escape.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_space:
        input:
            type: "str"
            arg: " "
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_with_several_null:
        input:
            type: "str"
            arg: "[1,null,null,null,2]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_negative_int:
        input:
            type: "str"
            arg: "[-123]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_false:
        input:
            type: "str"
            arg: "false"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_accepted_surrogate_pairs:
        input:
            type: "file"
            arg: "y_string_accepted_surrogate_pairs.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_three_byte_utf_8:
        input:
            type: "file"
            arg: "y_string_three_byte_utf_8.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_null:
        input:
            type: "str"
            arg: "null"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_true:
        input:
            type: "str"
            arg: "true"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_in_array:
        input:
            type: "file"
            arg: "y_string_in_array.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_U_plus_10FFFE_nonchar:
        input:
            type: "file"
            arg: "y_string_unicode_U_plus_10FFFE_nonchar.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode_2:
        input:
            type: "file"
            arg: "y_string_unicode_2.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number:
        input:
            type: "str"
            arg: "[123e65]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_null:
        input:
            type: "str"
            arg: "[null]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_double_escape_n:
        input:
            type: "file"
            arg: "y_string_double_escape_n.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_int:
        input:
            type: "str"
            arg: "42"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_backslash_and_u_escaped_zero:
        input:
            type: "file"
            arg: "y_string_backslash_and_u_escaped_zero.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_escaped_noncharacter:
        input:
            type: "file"
            arg: "y_string_escaped_noncharacter.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_with_del_character:
        input:
            type: "file"
            arg: "y_string_with_del_character.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_empty:
        input:
            type: "str"
            arg: "{}"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_nbsp_uescaped:
        input:
            type: "file"
            arg: "y_string_nbsp_uescaped.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_reservedCharacterInUTF_8_U_plus_1BFFF:
        input:
            type: "file"
            arg: "y_string_reservedCharacterInUTF_8_U_plus_1BFFF.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_real_neg_exp:
        input:
            type: "str"
            arg: "[1e-2]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_1_2_3_bytes_UTF_8_sequences:
        input:
            type: "file"
            arg: "y_string_1_2_3_bytes_UTF_8_sequences.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_arraysWithSpaces:
        input:
            type: "str"
            arg: "[[]   ]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_minus_zero:
        input:
            type: "str"
            arg: "[-0]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_trailing_newline:
        input:
            type: "file"
            arg: "y_structure_trailing_newline.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_surrogates_U_plus_1D11E_MUSICAL_SYMBOL_G_CLEF:
        input:
            type: "file"
            arg: "y_string_surrogates_U_plus_1D11E_MUSICAL_SYMBOL_G_CLEF.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_lonely_string:
        input:
            type: "str"
            arg: "asd"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_structure_whitespace_array:
        input:
            type: "str"
            arg: " [] "
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_unicode:
        input:
            type: "file"
            arg: "y_string_unicode.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_0e1:
        input:
            type: "str"
            arg: "[0e1]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_object_simple:
        input:
            type: "file"
            arg: "y_object_simple.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_array_ending_with_newline:
        input:
            type: "file"
            arg: "y_array_ending_with_newline.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_u_plus_2029_par_sep:
        input:
            type: "file"
            arg: "y_string_u_plus_2029_par_sep.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_negative_zero:
        input:
            type: "str"
            arg: "[-0]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_after_space:
        input:
            type: "str"
            arg: "[ 4]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_number_simple_int:
        input:
            type: "str"
            arg: "[123]"
        assert:
            func: "compare_dict"
            arg: "\"\""
    test_string_comments:
        input:
            type: "file"
            arg: "y_string_comments.json"
        assert:
            func: "compare_dict"
            arg: "\"\""
